{
	"$schema": "http://json-schema.org/schema",
	"$id": "/schema.json",
	"title": "Collagen",
	"description": "The schema for use with Collagen (https://github.com/rben01/collagen)",
	"type": "object",
	"anyOf": [
		{
			"properties": {
				"vars": { "$ref": "#/definitions/TagVariables" },
				"attrs": { "$ref": "#/definitions/XmlAttrs" },
				"children": { "$ref": "#/definitions/ChildTags" }
			}
		}
	],
	"properties": {
		"$schema": {
			"type": "string",
			"description": "The schema to use. Should be <https://rben01.github.io/collagen/schemas/schema.json>."
		}
	},
	"definitions": {
		"VariableValue": {
			"type": ["number", "string"]
		},
		"SimpleValue": {
			"type": ["number", "string", "boolean"]
		},
		"TagVariables": {
			"type": "object",
			"description": "An object of `name -> value`. Value must be a string or a number. If a string, interpolation is performed inside curly braces, as in `\"{x}\"` (evalutes to value of variable `x`) and `\"y plus 5 is: {(+ y 5)}\"` (adds 5 to variable `y`, then interpolates this result into the string).",
			"additionalProperties": { "$ref": "#/definitions/VariableValue" }
		},
		"XmlAttrs": {
			"type": "object",
			"description": "The XML attributes to assign to this element. Value must be a string or number. If a string, interpolation is performed inside curly braces, as in `\"{x}\"` (evalutes to value of variable `x`) and `\"y plus 5 is: {(+ y 5)}\"` (adds 5 to variable `y`, then interpolates into the string). `true` means the attribute will be included without a value.",
			"additionalProperties": { "$ref": "#/definitions/SimpleValue" }
		},
		"ChildTags": {
			"type": "array",
			"description": "The children of this SVG element.",
			"items": { "$ref": "#/definitions/AnyChildTag" }
		},
		"AnyChildTag": {
			"oneOf": [
				{
					"$ref": "#/definitions/OtherTag"
				},
				{
					"$ref": "#/definitions/ImageTag"
				},
				{
					"$ref": "#/definitions/ContainerTag"
				},
				{
					"$ref": "#/definitions/NestedSvgTag"
				},
				{
					"$ref": "#/definitions/ForeachTag"
				},
				{
					"$ref": "#/definitions/IfTag"
				},
				{
					"$ref": "#/definitions/TextTag"
				},
				{
					"$ref": "#/definitions/FontTag"
				}
			]
		},
		"OtherTag": {
			"type": "object",
			"description": "A generic SVG tag; no special handling is done.",
			"properties": {
				"tag": {
					"type": "string",
					"description": "The name of this tag, e.g., \"tag\": \"line\" becomes `<line></line>`."
				},
				"vars": { "$ref": "#/definitions/TagVariables" },
				"attrs": { "$ref": "#/definitions/XmlAttrs" },
				"children": { "$ref": "#/definitions/ChildTags" }
			},
			"required": ["tag"]
		},
		"ImageTag": {
			"type": "object",
			"description": "A tag that includes an image at a given path. The image is automatically base64-encoded in the output.",
			"properties": {
				"vars": { "$ref": "#/definitions/TagVariables" },
				"attrs": { "$ref": "#/definitions/XmlAttrs" },
				"children": { "$ref": "#/definitions/ChildTags" },
				"image_path": {
					"type": "string",
					"description": "The path to the image to include. Interpolation is performed on the text."
				},
				"kind": {
					"type": "string",
					"description": "The kind of the included image. If omitted, the image's file extension will be used. Examples: `\"jpg\"`, `\"png\"`, etc. (This can almost always be omitted because images generally have the correct file extension.)"
				}
			},
			"required": ["image_path"]
		},
		"ContainerTag": {
			"type": "object",
			"description": "A tag that includes another Collagen folder as a child in this one.",
			"properties": {
				"clgn_path": {
					"type": "string",
					"description": "The path to the other Collagen folder."
				}
			},
			"required": ["clgn_path"],
			"additionalProperties": false
		},
		"NestedSvgTag": {
			"type": "object",
			"description": "A tag that includes another SVG as a child in this Collagen folder. The other SVG has its outer `<svg>` tag and any XML declaration stripped, but is otherwise left untouched.",
			"properties": {
				"svg_path": {
					"type": "string",
					"description": "The path to the SVG file to include."
				},
				"vars": { "$ref": "#/definitions/TagVariables" },
				"attrs": { "$ref": "#/definitions/XmlAttrs" }
			},
			"required": ["svg_path"],
			"additionalProperties": false
		},
		"ForeachTag": {
			"type": "object",
			"description": "A tag that produces children by looping over the given iterator. For each iterated element, a copy of `do` is produced. Children are included as-is in their parent, with no intermediate tag. If an intermediate tag is desired, consider placing this tag or its children in a \"g\" tag.",
			"properties": {
				"for_each": {
					"$ref": "#/definitions/ForeachTag/definitions/Loop"
				},
				"do": {
					"$ref": "#/definitions/AnyChildTag",
					"description": "The tag template to emit on each iteration."
				},
				"vars": { "$ref": "#/definitions/TagVariables" }
			},
			"required": ["for_each", "do"],
			"additionalProperties": false,
			"definitions": {
				"LoopVariable": {
					"type": "object",
					"properties": {
						"variable": {
							"type": "string",
							"description": "The name of the loop variable. This can be interpolated into expressions like any other variable."
						},
						"in": {
							"description": "The collection of values to loop over",
							"anyOf": [
								{
									"type": "object",
									"title": "Range",
									"description": "A range of equally spaced values.",
									"properties": {
										"start": {
											"$ref": "#/definitions/VariableValue",
											"description": "The range's starting point."
										},
										"end": {
											"$ref": "#/definitions/VariableValue",
											"description": "The range's ending point."
										},
										"step": {
											"$ref": "#/definitions/VariableValue",
											"description": "The range's step. Must have the same sign as `end - start`, and in particular must not be 0. Always traverses from `start` to `end`, in that order. If omitted, is set to 1 if `start < end`, else -1 (with `end < start`).",
											"not": { "const": 0 }
										},
										"closed": {
											"type": "boolean",
											"description": "Whether the range should include `end`. If omitted, is set to `false`."
										}
									},
									"required": ["start", "end"]
								},
								{
									"type": "array",
									"description": "A hard-coded list of values. Interpolation is performed on strings.",
									"items": { "$ref": "#/definitions/VariableValue" }
								}
							]
						}
					},
					"required": ["variable", "in"]
				},
				"Loop": {
					"oneOf": [
						{ "$ref": "#/definitions/ForeachTag/definitions/LoopVariable" },
						{
							"type": "array",
							"items": {
								"$ref": "#/definitions/ForeachTag/definitions/LoopVariable"
							},
							"minLength": 1
						}
					],
					"description": "A variable or list of variables to loop over. A singleton is treated as a list of length 1. If multiple variables+iterables are provided, they are \"zipped\" together (and therefore must have the same length)."
				}
			}
		},
		"IfTag": {
			"type": "object",
			"description": "An if-then-else tag. Produces its `then` child if its predicate is true. If `else` is provided, produces its `else` child if its predicate is false. The child is produced as-is in its parent, with no intermediate tag. If an intermediate tag is desired, consider placing this tag or its child in a \"g\" tag.",
			"properties": {
				"if": {
					"type": "string",
					"description": "The predicate to evaluate to determine which branch to emit."
				},
				"then": {
					"$ref": "#/definitions/AnyChildTag",
					"description": "The child to emit if the predicate evaluates to true (nonzero)."
				},
				"else": {
					"$ref": "#/definitions/AnyChildTag",
					"description": "The (optional) child to emit if the predicate evaluates to false (zero). If omitted, nothing will be omitted when the predicate is false."
				},
				"vars": {
					"$ref": "#/definitions/TagVariables"
				}
			},
			"required": ["if", "then"]
		},
		"TextTag": {
			"type": "object",
			"description": "Some text to be included within a tag.",
			"properties": {
				"text": {
					"type": "string",
					"description": "The text to include. Supports variable substitution and expression evaluation."
				},
				"is_preescaped": {
					"type": "boolean",
					"description": "Whether the text is already preescaped, or needs escaping. Escaping is done after evaluation of expressions."
				}
			}
		},
		"FontTag": {
			"type": "array",
			"description": "A tag that includes various font files in the SVG.",
			"items": { "$ref": "#/definitions/FontTag/definitions/FontFace" },
			"definitions": {
				"FontFace": {
					"properties": {
						"bundled": { "type": "boolean" },
						"name": { "type": "string" },
						"attrs": {
							"type": "object",
							"additionalProperties": { "type": "string" }
						}
					},
					"if": {
						"properties": { "bundled": { "const": false } }
					},
					"then": {
						"properties": { "path": { "type": "string" } },
						"required": ["path"]
					},
					"additionalProperties": false
				}
			}
		}
	}
}
